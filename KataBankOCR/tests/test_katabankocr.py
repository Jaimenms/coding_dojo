# Testing KataBankOCR
import pytest
from KataBankOCR.katabankocr import complement_with_spaces
from KataBankOCR.katabankocr import extract_each_letter_fragment
from KataBankOCR.katabankocr import check_possible_numbers
from KataBankOCR.katabankocr import katabankocr

def test_complement_with_spaces():

    assert " _  _  _  _  _  _  _  _  _ " == complement_with_spaces(" _  _  _  _  _  _  _  _  _")

def test_extract_each_letter_part():

    value = " A  B  C  _  _  _  _  _  _ "

    assert " A " == extract_each_letter_fragment(value, 0)
    assert " B " == extract_each_letter_fragment(value, 1)
    assert " C " == extract_each_letter_fragment(value, 2)


def test_check_possible_numbers():

    assert "0" == check_possible_numbers([" _ ","| |","|_|"])
    assert "1" == check_possible_numbers(["   ","  |","  |"])


testdata = [
    (
        " _  _  _  _  _  _  _  _  _ ",
        "| || || || || || || || || |",
        "|_||_||_||_||_||_||_||_||_|",
        "000000000",
    ),
    (
        "                           ",
        "  |  |  |  |  |  |  |  |  |",
        "  |  |  |  |  |  |  |  |  |",
        "111111111",
    ),
    (
        " _  _  _  _  _  _  _  _  _ ",
        " _| _| _| _| _| _| _| _| _|",
        "|_ |_ |_ |_ |_ |_ |_ |_ |_ ",
        "222222222",
    ),
    (
        " _  _  _  _  _  _  _  _  _ ",
        " _| _| _| _| _| _| _| _| _|",
        " _| _| _| _| _| _| _| _| _|",
        "333333333",
    ),
    (
        "                           ",
        "|_||_||_||_||_||_||_||_||_|",
        "  |  |  |  |  |  |  |  |  |",
        "444444444",
    ),
    (
        " _  _  _  _  _  _  _  _  _ ",
        "|_ |_ |_ |_ |_ |_ |_ |_ |_ ",
        " _| _| _| _| _| _| _| _| _|",
        "555555555",
    ),
    (
        " _  _  _  _  _  _  _  _  _ ",
        "|_ |_ |_ |_ |_ |_ |_ |_ |_ ",
        "|_||_||_||_||_||_||_||_||_|",
        "666666666",
    ),
    (
        " _  _  _  _  _  _  _  _  _ ",
        "  |  |  |  |  |  |  |  |  |",
        "  |  |  |  |  |  |  |  |  |",
        "777777777",
    ),
    (
        " _  _  _  _  _  _  _  _  _ ",
        "|_||_||_||_||_||_||_||_||_|",
        "|_||_||_||_||_||_||_||_||_|",
        "888888888",
    ),
    (
        " _  _  _  _  _  _  _  _  _ ",
        "|_||_||_||_||_||_||_||_||_|",
        " _| _| _| _| _| _| _| _| _|",
        "999999999",
    ),
    (
        "    _  _     _  _  _  _  _ ",
        "  | _| _||_||_ |_   ||_||_|",
        "  ||_  _|  | _||_|  ||_| _|",
        "123456789",
    ),
    (
        " _  _  _  _  _  _  _  _    ",
        "| || || || || || || ||_   |",
        "|_||_||_||_||_||_||_| _|  |",
        "000000051",
    ),
    (
        "    _  _  _  _  _  _     _ ",
        "|_||_|| || ||_   |  |  | _ ",
        "  | _||_||_||_|  |  |  | _|",
        "49006771? ILL",
    ),
    (
        "    _  _     _  _  _  _  _ ",
        "  | _| _||_| _ |_   ||_||_|",
        "  ||_  _|  | _||_|  ||_| _ ",
        "1234?678? ILL",
    ),
    (
        "                           ",
        "  |  |  |  |  |  |  |  |  |",
        "  |  |  |  |  |  |  |  |  |",
        "711111111",
    ),
    (
        " _  _  _  _  _  _  _  _  _ ",
        "  |  |  |  |  |  |  |  |  |",
        "  |  |  |  |  |  |  |  |  |",
        "777777177",
    ),
    (
        " _  _  _  _  _  _  _  _  _ ",
        " _|| || || || || || || || |",
        "|_ |_||_||_||_||_||_||_||_|",
        "200800000",
    ),
    (
        " _  _  _  _  _  _  _  _  _ ",
        " _| _| _| _| _| _| _| _| _|",
        " _| _| _| _| _| _| _| _| _|",
        "333393333",
    ),
    (
        " _  _  _  _  _  _  _  _  _ ",
        "|_||_||_||_||_||_||_||_||_|",
        "|_||_||_||_||_||_||_||_||_|",
        "888888888 AMB ['888886888', '888888880', '888888988']",
    ),
    (
        " _  _  _  _  _  _  _  _  _ ",
        "|_ |_ |_ |_ |_ |_ |_ |_ |_ ",
        " _| _| _| _| _| _| _| _| _|",
        "555555555 AMB ['555655555', '559555555']",
    ),
    (
        " _  _  _  _  _  _  _  _  _ ",
        "|_ |_ |_ |_ |_ |_ |_ |_ |_ ",
        "|_||_||_||_||_||_||_||_||_|",
        "666666666 AMB ['666566666', '686666666']",
    ),
    (
        " _  _  _  _  _  _  _  _  _ ",
        "|_||_||_||_||_||_||_||_||_|",
        " _| _| _| _| _| _| _| _| _|",
        "999999999 AMB ['899999999', '993999999', '999959999']",
    ),
    (
        "    _  _  _  _  _  _     _ ",
        "|_||_|| || ||_   |  |  ||_ ",
        "  | _||_||_||_|  |  |  | _|",
        "490067715 AMB ['490067115', '490067719', '490867715']",
    ),
    (
        "    _  _     _  _  _  _  _ ",
        " _| _| _||_||_ |_   ||_||_|",
        "  ||_  _|  | _||_|  ||_| _|",
        "123456789",
    ),
    (
        "    _     _  _  _  _  _  _  ",
        "| || || || || || || ||_   |",
        "|_||_||_||_||_||_||_| _|  |",
        "000000051",
    ),
    (
        "    _  _  _  _  _  _     _ ",
        "|_||_|| ||_||_   |  |  | _ ",
        "  | _||_||_||_|  |  |  | _|",
        "490867715",
    ),
]


@pytest.mark.parametrize("in0, in1, in2, expected", testdata)
def test_cases(in0, in1, in2, expected):

    calculated = katabankocr(in0, in1, in2)

    assert expected == calculated
